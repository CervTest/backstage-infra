apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-extra-config
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
data:
  app-config.extra.yaml: |
    app:
      title: Backstage Helm App
      baseUrl: https://backstage.terasology.io

    organization:
      name: Proto Customer

    backend:
      logging:
        level: debug
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/auth/service-to-service-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: https://backstage.terasology.io
      listen:
        port: 7007
        # Uncomment the following host directive to bind to specific interfaces
        # host: 127.0.0.1
      csp:
        connect-src: ["'self'", 'http:', 'https:']
      cors:
        origin: http://*
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true

      database:
        # config options: https://node-postgres.com/apis/client
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}

      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

    integrations:
      github:
        - host: github.com
          # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
          # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
          token: ${GITHUB_TOKEN}
      gitlab:
        - host: gitlab.adaptavist.net
          token: ${GITLAB_TOKEN}
          apiBaseUrl: https://gitlab.adaptavist.net/api/v4

    jenkins:
      baseUrl: https://jenkins.terasology.io
      username: cervator
      apiKey: ${JENKINS_API_TOKEN}

    sonarqube:
      baseUrl: https://sonarqube.terasology.io
      apiKey: ${SONAR_TOKEN}

    confluence:
      # Confluence base URL for wiki API
      # Typically: https://{org-name}.atlassian.net/wiki
      wikiUrl: https://venuesh.atlassian.net/wiki/ # Cloud
      #wikiUrl: https://i.adaptavist.com # DC

      # List of spaces to index
      # See https://confluence.atlassian.com/conf59/spaces-792498593.html
      spaces: [Venuesh] # Cloud
      #spaces: [DH] # DC
      # Authentication credentials towards Confluence API
      auth:
        username: ${CONFLUENCE_USERNAME}
        # While Confluence supports BASIC authentication, using an API token is preferred.
        # See: https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/
        password: ${CONFLUENCE_PASSWORD}

    proxy:
      endpoints:
        '/nexus-repository-manager':
          target: 'https://nexus.terasology.io'
          headers:
            X-Requested-With: 'XMLHttpRequest'
            Authorization: 'Basic ${NEXUS_AUTHORIZATION}'
          changeOrigin: true
          # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
          secure: true
      '/jira/api':
        target: https://venuesh.atlassian.net # Cloud
        #target: https://tracker.adaptavist.com # DC
        headers:
          Authorization: "Basic ${JIRA_TOKEN}" # Cloud
          #Authorization: "Bearer ${JIRA_TOKEN}" # DC
          Accept: 'application/json'
          Content-Type: 'application/json'
          X-Atlassian-Token: 'no-check'
          # This is a workaround since Jira APIs reject browser origin requests. Any dummy string without whitespace works.
          User-Agent: "Backstage"

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      environment: development
      providers:
        github:
          development:
            # Applied this then remembered need to adjust code to activate the login. Also need the integration variant as well to create new repos
            # https://github.com/organizations/CervTest/settings/applications/2241184
            clientId: ${GITHUB_AUTH_CLIENT_ID}
            clientSecret: ${GITHUB_AUTH_CLIENT_SECRET}


    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:

      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Domain, Component, System, API, Resource, Location, Template, User, Group]
      locations:

        # Jenkins template (relied on an old Jenkinsfile in an Operator Jenkins)
        #- type: url
        #  target: https://github.com/Cervator/backstage-template-jenkins/blob/master/template.yaml

        # Ghost blog example template
        - type: url
          target: https://github.com/Cervator/backstage-template-ghost/blob/main/template.yaml

        - type: file
          target: ${CATALOG_FILE_PATH}/examples/entities.yaml

        # Local example template
        - type: file
          target: ${CATALOG_FILE_PATH}/examples/template/template.yaml

        # Local example organizational data
        - type: file
          target: ${CATALOG_FILE_PATH}/examples/org.yaml

        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml

        # Example but legit home made component
        - type: url
          target: https://github.com/CervTest/jibby/blob/main/catalog-info.yaml

        # And the related template that coould make such services
        - type: url
          target: https://github.com/CervTest/template-micronaut-jib/blob/main/template.yaml
